<application name="scale" azTimeoutMillis="30000" >
  <urls>



    <url regex="false" authChain="enterprise_idp" overrideHost="true" overrideReferer="true">
      <host>#[OU_HOST]</host>
      <filterChain>
        <filter class="com.tremolosecurity.prelude.filters.CompleteLogin" />
      </filterChain>
      <uri>/login/ldap</uri>
      <results>
        <auFail>Default Login Failure</auFail>
        <azFail>Default Login Failure</azFail>
      </results>
      <azRules>
        <rule scope="dn" constraint="o=Tremolo" />
      </azRules>
    </url>
    <!-- The regex attribute defines if the proxyTo tag should be interpreted with a regex or not -->
    <!-- The authChain attribute should be the name of an authChain -->
    <url regex="true" authChain="LoginService" overrideHost="true" overrideReferer="true">
      <!-- Any number of host tags may be specified to allow for an application to work on multiple hosts.  Additionally an asterick (*) can be specified to make this URL available for ALL hosts -->
      <host>#[OU_HOST]</host>
      <!-- The filterChain allows for transformations of the request such as manipulating attributes and injecting headers -->
      <filterChain>
        <!--<filter class="com.tremolosecurity.prelude.filters.LoginTest">
          <param name="logoutURI" value="/logout"/>
        </filter>-->
        <filter class="com.tremolosecurity.prelude.filters.StopProcessing" />
      </filterChain>
      <!-- The URI (aka path) of this URL -->
      <uri>^/$</uri>
      <!-- Tells OpenUnison how to reach the downstream application.  The ${} lets you set any request variable into the URI, but most of the time ${fullURI} is sufficient -->
      <proxyTo>http://dnm${fullURI}</proxyTo>
      <!-- List the various results that should happen -->
      <results>
        <azSuccess>ScaleJSRedirect</azSuccess>
        <auFail>Default Login Failure</auFail>
        <azFail>Default Login Failure</azFail>
      </results>
      <!-- Determine if the currently logged in user may access the resource.  If ANY rule succeeds, the authorization succeeds.
      The scope may be one of group, dn, filter, dynamicGroup or custom
      The constraint identifies what needs to be satisfied for the authorization to pass and is dependent on the scope:
        * group - The DN of the group in OpenUnison's virtual directory (must be an instance of groupOfUniqueNames)
        * dn - The base DN of the user or users in OpenUnison's virtual directory
        * dynamicGroup - The DN of the dynamic group in OpenUnison's virtual directory (must be an instance of groupOfUrls)
        * custom - An implementation of com.tremolosecurity.proxy.az.CustomAuthorization -->
      <azRules>
        <rule scope="dn" constraint="o=Tremolo" />
      </azRules>
    </url>
    <url regex="false" authChain="anon" overrideHost="true" overrideReferer="true">
      <!-- Any number of host tags may be specified to allow for an application to work on multiple hosts.  Additionally an asterick (*) can be specified to make this URL available for ALL hosts -->
      <host>#[OU_HOST]</host>
      <!-- The filterChain allows for transformations of the request such as manipulating attributes and injecting headers -->
      <filterChain>
        <filter class="com.tremolosecurity.prelude.filters.StopProcessing" />
      </filterChain>
      <!-- The URI (aka path) of this URL -->
      <uri>/logout</uri>
      <!-- Tells OpenUnison how to reach the downstream application.  The ${} lets you set any request variable into the URI, but most of the time ${fullURI} is sufficient -->
      <proxyTo>http://dnm${fullURI}</proxyTo>
      <!-- List the various results that should happen -->
      <results>
        <azSuccess>LogoutDashboard</azSuccess>
      </results>
      <!-- Determine if the currently logged in user may access the resource.  If ANY rule succeeds, the authorization succeeds.
                The scope may be one of group, dn, filter, dynamicGroup or custom
                The constraint identifies what needs to be satisfied for the authorization to pass and is dependent on the scope:
                  * group - The DN of the group in OpenUnison's virtual directory (must be an instance of groupOfUniqueNames)
                  * dn - The base DN of the user or users in OpenUnison's virtual directory
                  * dynamicGroup - The DN of the dynamic group in OpenUnison's virtual directory (must be an instance of groupOfUrls)
                  * custom - An implementation of com.tremolosecurity.proxy.az.CustomAuthorization -->
      <azRules>
        <rule scope="dn" constraint="o=Tremolo" />
      </azRules>
    </url>

    <url regex="false" authChain="LoginService" overrideHost="true" overrideReferer="true">
      <host>#[OU_HOST]</host>
      <filterChain>
        <filter class="com.tremolosecurity.proxy.filters.SetNoCacheHeaders">
        </filter>
      </filterChain>
      <uri>/scale</uri>

      <results>
        <azSuccess>
        </azSuccess>
        <auFail>Default Login Failure</auFail>
        <azFail>Default Login Failure</azFail>
      </results>
      <azRules>
        <rule scope="dn" constraint="o=Tremolo" />
      </azRules>
    </url>
    <url regex="false" authChain="LoginService" overrideHost="true" overrideReferer="true">
      <host>#[OU_HOST]</host>
      <filterChain>
        <filter class="com.tremolosecurity.scalejs.ws.ScaleMain">
          <param name="displayNameAttribute" value="sub"/>
          <param name="frontPage.title" value="Kubernetes Access Portal"/>
          <param name="frontPage.text" value="Use this portal to create and access namespaces in Kubernetes"/>
          <param name="canEditUser" value="false"/>
          <param name="workflowName" value=""/>
          <param name="warnMinutesLeft" value="5" />
          <param name="attributeNames" value="sub"/>
          <param name="sub.displayName" value="Login ID"/>
          <param name="sub.readOnly" value="true"/>
          <param name="uidAttributeName" value="uid"/>
          <param name="roleAttribute" value="groups"/>
          <param name="approvalAttributeNames" value="uid"/>
          <param name="approvals.uid" value="Login ID"/>
          <param name="showPortalOrgs" value="#[SHOW_PORTAL_ORGS:false]"/>
          <param name="logoutURL" value="/logout"/>
          <param name="canDelegate" value="NO" />
          <param name="canPreApprove" value="NO" />

        </filter>
      </filterChain>
      <uri>/scale/main</uri>
      <results>
        <azSuccess>
        </azSuccess>
        <auFail>Default Login Failure</auFail>
        <azFail>Default Login Failure</azFail>
      </results>
      <azRules>
        <rule scope="dn" constraint="o=Tremolo" />
      </azRules>
    </url>
    

            <url regex="false" authChain="LoginService" overrideHost="false" overrideReferer="false">
                <host>#[OU_HOST]</host>
                <filterChain>
                  <filter class="com.tremolosecurity.proxy.filters.SetNoCacheHeaders">
                  </filter>
                </filterChain>
                <uri>/k8stoken</uri>

                <results>
                    <auSuccess></auSuccess>
                    <auFail>Default Login Failure</auFail>
                    <azSuccess></azSuccess>
                    <azFail>PrivilegedRequest</azFail>
                </results>
                <azRules>
                    <rule scope="dn" constraint="o=Tremolo"/>
                </azRules>
            </url>

            <url regex="false" authChain="LoginService" overrideHost="false" overrideReferer="false">
                <host>#[OU_HOST]</host>
                <filterChain>
                  <filter class="com.tremolosecurity.proxy.filters.SetNoCacheHeaders">
                  </filter>
                  <filter class="com.tremolosecurity.scalejs.token.ws.ScaleToken">
                  <param name="displayNameAttribute" value="sub"/>
                  <param name="frontPage.title" value="Kubernetes kubectl command"/>
                  <param name="frontPage.text" value="First install the certificates for Kubernetes and OpenUnison into your system's trust store, then use this kubectl command to set your user in .kubectl/config"/>
                  <param name="logoutURL" value="/logout"/>
                  <param name="homeURL" value="/scale/index.jsp"/>
                  <param name="warnMinutesLeft" value="5" />>
                  <param name="tokenClassName" value="com.tremolosecurity.scalejs.KubectlTokenLoader"/>
                  <param name="uidAttributeName" value="sub"/>
                  <param name="kubectlUsage" value="Run the kubectl command to set your user-context and server connection" />
                  <param name="k8sCaCertName" value="#[K8S_API_SERVER_CERT:unison-ca]" useWhen="K8S_IMPERSONATION=true" />
                  <param name="k8sCaCertName" value="#[K8S_API_SERVER_CERT:k8s-master]" useWhen="K8S_IMPERSONATION=false" useDefault="true"/>
                  <param name="unisonCaCertName" value="unison-ca"/>
                  <param name="kubectlTemplate" value="export TMP_CERT=\$(mktemp) &amp;&amp; echo -e &quot;$k8s_newline_cert$&quot; > \$TMP_CERT &amp;&amp; kubectl config set-cluster #[K8S_CLUSTER_NAME:kubernetes] --server=#[K8S_URL] --certificate-authority=\$TMP_CERT --embed-certs=true &amp;&amp; kubectl config set-context #[K8S_CLUSTER_NAME:kubernetes] --cluster=#[K8S_CLUSTER_NAME:kubernetes] --user=$user_id$@#[K8S_CLUSTER_NAME:kubernetes]  &amp;&amp; kubectl config set-credentials $user_id$@#[K8S_CLUSTER_NAME:kubernetes]  --auth-provider=oidc --auth-provider-arg=client-secret= --auth-provider-arg=idp-issuer-url=$token.claims.issuer$ --auth-provider-arg=client-id=$token.trustName$ --auth-provider-arg=refresh-token=$token.refreshToken$  --auth-provider-arg=id-token=$token.encodedIdJSON$  --auth-provider-arg=idp-certificate-authority-data=#[IDP_CERT_DATA:$ou_b64_cert$]   &amp;&amp; kubectl config use-context #[K8S_CLUSTER_NAME:kubernetes] &amp;&amp; rm \$TMP_CERT" />
                  <param name="kubectlWinUsage" value="\$TMP_CERT=New-TemporaryFile ; &quot;$k8s_newline_cert_win$&quot; | out-file \$TMP_CERT -encoding oem ; kubectl config set-cluster #[K8S_CLUSTER_NAME:kubernetes] --server=#[K8S_URL]  --certificate-authority=\$TMP_CERT --embed-certs=true ; kubectl config set-context #[K8S_CLUSTER_NAME:kubernetes] --cluster=#[K8S_CLUSTER_NAME:kubernetes] --user=$user_id$@#[K8S_CLUSTER_NAME:kubernetes]  ; kubectl config set-credentials $user_id$@#[K8S_CLUSTER_NAME:kubernetes]  --auth-provider=oidc --auth-provider-arg=client-secret= --auth-provider-arg=idp-issuer-url=$token.claims.issuer$ --auth-provider-arg=client-id=$token.trustName$ --auth-provider-arg=refresh-token=$token.refreshToken$  --auth-provider-arg=id-token=$token.encodedIdJSON$  --auth-provider-arg=idp-certificate-authority-data=$ou_b64_cert$ ; kubectl config use-context #[K8S_CLUSTER_NAME:kubernetes] ; Remove-Item -recurse -force \$TMP_CERT" />
                </filter>
                </filterChain>
                <uri>/k8stoken/token</uri>

                <results>
                    <auSuccess></auSuccess>
                    <auFail>Default Login Failure</auFail>
                    <azSuccess></azSuccess>
                    <azFail>PrivilegedRequest</azFail>
                </results>
                <azRules>
                    <rule scope="dn" constraint="o=Tremolo"/>
                </azRules>
            </url>


  </urls>
  <!-- The cookie configuration determines how sessions are managed for this application -->
  <cookieConfig>
    <!-- The name of the session cookie for this application.  Applications that want SSO between them should have the same cookie name -->
      <sessionCookieName>tremolosession</sessionCookieName>
    <!-- The domain of component of the cookie -->
    <domain>#[OU_HOST]</domain>
    <!-- The URL that OpenUnison will interpret as the URL to end the session -->
    <logoutURI>/logout</logoutURI>
    <!-- The name of the AES-256 key in the keystore to use to encrypt this session -->
    <keyAlias>session-unison</keyAlias>
    <!-- If set to true, the cookie's secure flag is set to true and the browser will only send this cookie over https connections -->
    <secure>true</secure>
    <httpOnly>true</httpOnly>
    <!-- The number of secconds that the session should be allowed to be idle before no longer being valid -->
    <timeout>#[SESSION_INACTIVITY_TIMEOUT_SECONDS]</timeout>
    <!-- required but ignored -->
    <scope>-1</scope>
  </cookieConfig>
</application>
